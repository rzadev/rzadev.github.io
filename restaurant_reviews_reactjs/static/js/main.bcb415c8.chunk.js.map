{"version":3,"sources":["api/googlemaps.js","components/Sidebar.js","components/RatingsFilter.js","components/AddRestaurants.js","components/Header.js","components/App.js","index.js"],"names":["getGoogleImage","restaurantsMarkers","lat","lng","Sidebar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onReviewSubmit","e","details","target","childNodes","forEach","el","tagName","name","value","places","place","id","place_id","rating","alert","feedback","currentRatingSum","user_ratings_total","parseInt","geometry","location","Math","round","newReview","state","addReview","slice","push","setState","preventDefault","clearInput","_this2","react_default","a","createElement","className","children","map","key","onClick","listItemClick","react_star_rating_component_default","starColor","emptyStarColor","renderStarIcon","index","renderStarIconHalf","style","position","vicinity","onSubmit","required","autoFocus","type","placeholder","Component","RatingsFilter","onFormSubmit","event","ratings","htmlFor","onChange","AddRestaurants","onChangeInput","defineProperty","newRestaurantName","newRestaurantAddress","address","newRestaurantRating","newRestaurantFeedback","newSubmit","assign","newRestaurant","addRestaurant","handleSubmit","addNewRestaurantList","toConsumableArray","newRestaurantList","objectSpread","document","getElementById","display","Header","detectEvent","closeIcon","querySelector","sideBar","classList","toggle","App","ratingsNum","Number","updatedFilteredPlaces","filter","filteredPlaces","filteredPlace","markers","marker","setVisible","infowindow","setContent","title","open","newRestaurantObj","reviews","newMarkers","list","randomID","newMarkersArr","newReviewObj","review","newReviews","lon","placeReviews","localPlaceReviews","newReviewList","newReviewsNewRestaurants","currentClickLocation","get_google","Promise","resolve","reject","window","resolveGoogleMapsPromise","google","script","src","concat","async","body","appendChild","localJson","require","navigator","geolocation","getCurrentPosition","parseFloat","coords","latitude","longitude","err","console","log","all","then","values","placeReviewsObj","localPlaceReviewsObj","currentPos","maps","LatLng","InfoWindow","maxWidth","results","newMarkersObj","Map","zoom","center","styles","featureType","stylers","visibility","service","PlacesService","markerIcon","url","size","Size","origin","Point","anchor","scaledSize","locals","i","length","local","localPlaceID","localPlaceDetail","showLocalJSON","nearbySearch","radius","status","result","undefined","request","placeId","fields","getDetails","PlacesServiceStatus","OK","placeID","placeDetail","viewMarkers","addListener","random","toString","substr","addTempMarker","latLng","addEventListener","addMarker","additionalMarkers","Marker","animation","Animation","DROP","icon","selectedNewMarker","filteredNewMarkerArr","additionalMarker","viewNewMarkers","selectedNewReviewsNewMarker","filteredNewReviewsNewMarkerArr","viewNewReviewsNewMarkers","newMarkerBox","text","join","newTempMarker","visible","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","getAnimation","setAnimation","BOUNCE","setTimeout","selectedReviewsById","restaurantID","filteredReviews","indexOf","filterReviews","selectedNewReviews","filteredNewReviewsArr","filterNewReviews","reviewBox","author_name","_iterator","Symbol","iterator","next","done","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop2","localMarkers","selectedLocalReviewsById","filteredLocalReviews","filterLocalReviews","reviewLocalJsonBox","_iterator2","localMarker","userPosition","_loop3","starPercentage","starPercentageRounded","querySelectorAll","innerDiv","width","starRatings","catch","error","components_Header","components_AddRestaurants","components_Sidebar","components_RatingsFilter","ReactDOM","render","src_components_App"],"mappings":"wlCAmBO,SAASA,EAAeC,GAC7B,MACE,yEACAA,EAAmBC,IACnB,IACAD,EAAmBE,IACnB,oGCgJWC,cApKb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMRQ,eAAiB,SAAAC,GACf,IAAMC,EAAU,GAGhBD,EAAEE,OAAOC,WAAWC,QAAQ,SAAAC,GACP,aAAfA,EAAGC,SAAyC,WAAfD,EAAGC,UAElCL,EAAQI,EAAGE,MAAQF,EAAGG,SAI1BhB,EAAKD,MAAMkB,OAAOL,QAAQ,SAAAM,GACxB,GAAIV,EAAEE,OAAOS,KAAOD,EAAME,SAAU,CAElC,GAAuB,kBAAnBX,EAAQY,OAEV,OADAC,MAAM,6DACC,EAGT,GAAyB,KAArBb,EAAQc,SAEV,OADAD,MAAM,4DACC,EAGT,IACIE,EADYN,EAAMG,OAASH,EAAMO,mBACFC,SAASjB,EAAQY,QAEhDZ,EAAQY,QAAU,GAA0B,KAArBZ,EAAQc,WAEjCd,EAAO,GAASS,EAAME,SACtBX,EAAO,SAAeS,EAAMS,SAASC,SAGrCV,EAAMO,sBAKRP,EAAMG,OACJQ,KAAKC,MAAON,EAAmBN,EAAMO,mBAAsB,IAAM,MAKvE,IAAMM,EAAY/B,EAAKgC,MAAMC,UAAUC,QACvCH,EAAUI,KAAK1B,GAGfT,EAAKoC,SAAS,CAAEH,UAAWF,GAAa,WACtC/B,EAAKD,MAAMQ,eAAeP,EAAKgC,MAAMC,aAEvCzB,EAAE6B,iBACFrC,EAAKsC,WAAW9B,IA3DCR,EA+DnBsC,WAAa,SAAA9B,GACXA,EAAEE,OAAOC,WAAWC,QAAQ,SAAAC,GACP,aAAfA,EAAGC,UACLD,EAAGG,MAAQ,MAEM,WAAfH,EAAGC,UACLD,EAAGG,MAAQ,oBAnEfhB,EAAKgC,MAAQ,CACXC,UAAW,IAHIjC,wEA0EV,IAAAuC,EAAApC,KACP,OACEqC,EAAAC,EAAAC,cAAA,OAAKvB,GAAG,eACNqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqBxC,KAAKJ,MAAM6C,UAC/CJ,EAAAC,EAAAC,cAAA,OAAKvB,GAAG,UACLhB,KAAKJ,MAAMkB,OAAO4B,IAAI,SAAA3B,GAAK,OAC1BsB,EAAAC,EAAAC,cAAA,OACEI,IAAK5B,EAAME,SACXuB,UAAU,cACVI,QAAS,WACPR,EAAKxC,MAAMiD,cAAc9B,KAG3BsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,IAAkCzB,EAAMH,KAAxC,KACAyB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBzB,EAAMG,QACrCmB,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CACE1B,KAAK,SACLmC,UAAU,UACVC,eAAe,UACfnC,MAAOE,EAAMG,OACb+B,eAAgB,SAACC,EAAOrC,GACtB,OACEwB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,KACEC,UACEU,GAASrC,EAAQ,cAAgB,kBAM3CsC,mBAAoB,WAClB,OACEd,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,QAAMa,MAAO,CAAEC,SAAU,aACvBhB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAEfH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,0BAMvBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAf,IACIzB,EAAMO,mBADV,MAIFe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBzB,EAAMuC,UAErCjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMgB,SAAUnB,EAAKhC,eAAgBY,GAAID,EAAME,UAC7CoB,EAAAC,EAAAC,cAAA,UACEC,UAAU,8CACVxB,GAAG,eACHJ,KAAK,SACL4C,UAAQ,GAERnB,EAAAC,EAAAC,cAAA,UAAQ1B,MAAM,gBAAgB4C,WAAS,GAAvC,iBAGApB,EAAAC,EAAAC,cAAA,UAAQ1B,MAAM,KAAd,KACAwB,EAAAC,EAAAC,cAAA,UAAQ1B,MAAM,KAAd,KACAwB,EAAAC,EAAAC,cAAA,UAAQ1B,MAAM,KAAd,KACAwB,EAAAC,EAAAC,cAAA,UAAQ1B,MAAM,KAAd,KACAwB,EAAAC,EAAAC,cAAA,UAAQ1B,MAAM,KAAd,KACAwB,EAAAC,EAAAC,cAAA,UAAQ1B,MAAM,KAAd,MAGFwB,EAAAC,EAAAC,cAAA,YACEmB,KAAK,OACLlB,UAAU,gDACVxB,GAAG,WACHJ,KAAK,WACL+C,YAAY,sBAEdtB,EAAAC,EAAAC,cAAA,SAAOmB,KAAK,SAAS7C,MAAM,SAASG,GAAID,EAAME,0BAzJ5C2C,aCkCPC,cAnCb,SAAAA,EAAYjE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6D,IACjBhE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+D,GAAA1D,KAAAH,KAAMJ,KAIRkE,aAAe,SAAAC,GACbA,EAAM7B,iBACNrC,EAAKD,MAAMkE,aAAajE,EAAKgC,MAAMmC,UALnCnE,EAAKgC,MAAQ,CAAEmC,QAAS,IAFPnE,wEAUV,IAAAuC,EAAApC,KACP,OACEqC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,QAAMgB,SAAUvD,KAAK8D,cACnBzB,EAAAC,EAAAC,cAAA,SAAO0B,QAAQ,gBAAf,oBACA5B,EAAAC,EAAAC,cAAA,UACEvB,GAAG,eACHH,MAAOb,KAAK6B,MAAMmC,QAClBE,SAAU,SAAA7D,GAAC,OAAI+B,EAAKH,SAAS,CAAE+B,QAAS3D,EAAEE,OAAOM,UAEjDwB,EAAAC,EAAAC,cAAA,UAAQ1B,MAAM,OAAd,cACAwB,EAAAC,EAAAC,cAAA,UAAQ1B,MAAM,OAAd,OACAwB,EAAAC,EAAAC,cAAA,UAAQ1B,MAAM,OAAd,OACAwB,EAAAC,EAAAC,cAAA,UAAQ1B,MAAM,OAAd,OACAwB,EAAAC,EAAAC,cAAA,UAAQ1B,MAAM,OAAd,OACAwB,EAAAC,EAAAC,cAAA,UAAQ1B,MAAM,OAAd,OACAwB,EAAAC,EAAAC,cAAA,UAAQ1B,MAAM,OAAd,QAEFwB,EAAAC,EAAAC,cAAA,SAAOmB,KAAK,SAAS7C,MAAM,oBA7BT+C,oCC0JbO,qBAxJb,SAAAA,EAAYvE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmE,IACjBtE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqE,GAAAhE,KAAAH,KAAMJ,KAYRwE,cAAgB,SAAA/D,GACd,IAAME,EAASF,EAAEE,OACXK,EAAOL,EAAOK,KACdC,EAAQN,EAAOM,MAErBhB,EAAKoC,SAALnC,OAAAuE,EAAA,EAAAvE,CAAA,GAAiBc,EAAOC,GAAS,WAC/BhB,EAAKD,MAAM0E,kBAAkBzE,EAAKgC,MAAMjB,MACxCf,EAAKD,MAAM2E,qBAAqB1E,EAAKgC,MAAM2C,SAC3C3E,EAAKD,MAAM6E,oBAAoB5E,EAAKgC,MAAMX,QAC1CrB,EAAKD,MAAM8E,sBAAsB7E,EAAKgC,MAAMT,aAtB7BvB,EA2BnB8E,UAAY,SAAAtE,GACVA,EAAE6B,iBAEFrC,EAAKoC,SACHnC,OAAO8E,OAAO/E,EAAKgC,MAAMgD,cAAe,CACtCjE,KAAMf,EAAKgC,MAAMjB,KACjB4D,QAAS3E,EAAKgC,MAAM2C,QACpBtD,OAAQrB,EAAKgC,MAAMX,OACnBE,SAAUvB,EAAKgC,MAAMT,WAEvB,WACEvB,EAAKiF,kBAITjF,EAAKkF,gBA1CYlF,EA8CnBiF,cAAgB,WACd,IAAIE,EAAoBlF,OAAAmF,EAAA,EAAAnF,CAAOD,EAAKgC,MAAMqD,mBAC1CF,EAAqBhD,KAArBlC,OAAAqF,EAAA,EAAArF,CAAA,GAA+BD,EAAKgC,MAAMgD,gBAE1ChF,EAAKoC,SAAS,CAAEiD,kBAAmBF,GAAwB,WAEzDnF,EAAKD,MAAM+E,UAAU9E,EAAKgC,MAAMqD,mBAChCrF,EAAKsC,gBArDUtC,EA0DnBsC,WAAa,WACXtC,EAAKoC,SAAS,CACZrB,KAAM,GACN4D,QAAS,GACTtD,OAAQ,gBACRE,SAAU,KAEZvB,EAAKoC,SACHnC,OAAO8E,OAAO/E,EAAKgC,MAAMgD,cAAe,CACtCjE,KAAM,GACN4D,QAAS,GACTtD,OAAQ,GACRE,SAAU,OAtEGvB,EA4EnBkF,aAAe,WACbK,SAASC,eAAe,iBAAiBjC,MAAMkC,QAAU,QA3EzDzF,EAAKgC,MAAQ,CACXjB,KAAM,GACN4D,QAAS,GACTtD,OAAQ,GACRE,SAAU,GACVyD,cAAe,GACfK,kBAAmB,IARJrF,wEAiFjB,OACEwC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKvB,GAAG,iBACNqB,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAce,SAAUvD,KAAK2E,WAC3CtC,EAAAC,EAAAC,cAAA,SACEmB,KAAK,OACLlB,UAAU,8CACVxB,GAAG,OACHJ,KAAM,OACNC,MAAOb,KAAK6B,MAAMjB,KAClBsD,SAAUlE,KAAKoE,cACfT,YAAY,kBACZH,UAAQ,IAGVnB,EAAAC,EAAAC,cAAA,YACEmB,KAAK,OACLlB,UAAU,kDACVxB,GAAG,UACHJ,KAAK,UACLC,MAAOb,KAAK6B,MAAM2C,QAClBN,SAAUlE,KAAKoE,cACfT,YAAY,qBACZH,UAAQ,IAGVnB,EAAAC,EAAAC,cAAA,UACEC,UAAU,gDACVxB,GAAG,SACHJ,KAAK,SACLC,MAAOb,KAAK6B,MAAMX,OAClBgD,SAAUlE,KAAKoE,cACfZ,UAAQ,GAERnB,EAAAC,EAAAC,cAAA,UAAQ1B,MAAM,GAAG4C,WAAS,GAA1B,iBAGApB,EAAAC,EAAAC,cAAA,UAAQ1B,MAAM,KAAd,KACAwB,EAAAC,EAAAC,cAAA,UAAQ1B,MAAM,KAAd,KACAwB,EAAAC,EAAAC,cAAA,UAAQ1B,MAAM,KAAd,KACAwB,EAAAC,EAAAC,cAAA,UAAQ1B,MAAM,KAAd,KACAwB,EAAAC,EAAAC,cAAA,UAAQ1B,MAAM,KAAd,KACAwB,EAAAC,EAAAC,cAAA,UAAQ1B,MAAM,KAAd,MAGFwB,EAAAC,EAAAC,cAAA,YACEmB,KAAK,OACLlB,UAAU,kDACVxB,GAAG,WACHJ,KAAK,WACLC,MAAOb,KAAK6B,MAAMT,SAClB8C,SAAUlE,KAAKoE,cACfT,YAAY,sBACZH,UAAQ,IAGVnB,EAAAC,EAAAC,cAAA,UACEC,UAAU,sBACVkB,KAAK,SACLH,SAAUvD,KAAK+E,cAHjB,oBA3IiBnB,cC2Bd2B,oNA1BbC,YAAc,WACZ,IAAIC,EAAYL,SAASM,cAAc,cACnCC,EAAUP,SAASM,cAAc,gBAErCD,EAAUG,UAAUC,OAAO,UACG,KAA1BF,EAAQvC,MAAMkC,SAA4C,UAA1BK,EAAQvC,MAAMkC,QAChDK,EAAQvC,MAAMkC,QAAU,OAExBK,EAAQvC,MAAMkC,QAAU,iFAK1B,OACEjD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKvB,GAAG,UAAR,sBACAqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYI,QAAS5C,KAAKwF,aACvCnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBApBJoB,cC2qBNkC,cApqBb,SAAAA,EAAYlG,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8F,IACjBjG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgG,GAAA3F,KAAAH,KAAMJ,KAgiBRkE,aAAe,SAAAE,GACb,IAAI+B,EAAaC,OAAOhC,GAGpBiC,EAAwBpG,EAAKgC,MAAMf,OAAOoF,OAAO,SAAAnF,GACnD,OAAOA,EAAMG,QAAU6E,IAGzBlG,EAAKoC,SAAS,CAAEkE,eAAgBF,IAGhCpG,EAAKgC,MAAMsE,eAAe1F,QAAQ,SAAA2F,GAChCvG,EAAKwG,QAAQ5F,QAAQ,SAAA6F,GACfF,EAAcnF,WAAaqF,EAAOtF,KACpCsF,EAAOpF,OAASkF,EAAclF,QAE5BoF,EAAOpF,QAAU6E,EACnBO,EAAOC,YAAW,GACM,IAAfR,EACTO,EAAOC,YAAW,GAElBD,EAAOC,YAAW,QAtjBP1G,EA6jBnBgD,cAAgB,SAAA9B,GAEd,IAAIuF,EAASzG,EAAKwG,QAAQH,OAAO,SAAAI,GAAM,OAAIA,EAAOtF,KAAOD,EAAME,WAAU,GAEzEpB,EAAK2G,WAAWC,WAAWH,EAAOI,OAClC7G,EAAK2G,WAAWG,KAAK9G,EAAK6C,IAAK4D,IAlkBdzG,EAskBnByE,kBAAoB,SAAA1D,GAClBf,EAAKoC,SAAS,CAAEqC,kBAAmB1D,GAAQ,eAvkB1Bf,EA2kBnB0E,qBAAuB,SAAA3D,GACrBf,EAAKoC,SAAS,CAAEsC,qBAAsB3D,GAAQ,eA5kB7Bf,EAglBnB4E,oBAAsB,SAAAvD,GACpBrB,EAAKoC,SAAS,CAAEwC,oBAAqBvD,GAAU,eAjlB9BrB,EAqlBnB6E,sBAAwB,SAAA9D,GACtBf,EAAKoC,SAAS,CAAEyC,sBAAuB9D,GAAQ,eAtlB9Bf,EA4lBnB8E,UAAY,SAAAO,GACV,IAAI0B,EAAmB,CACrBpF,SAAU,GACVqF,QAAS,IAIXhH,EAAKiH,WAAWrG,QAAQ,SAAA6F,GACtBM,EAAgB,SAAeN,EAAOjD,SACtCuD,EAAgB,SAAhB,SAA2CN,EAAOjD,WAIpD6B,EAAkBzE,QAAQ,SAAAsG,GACxBH,EAAgB,SAAe/G,EAAKgC,MAAMmF,SAC1CJ,EAAgB,KAAWG,EAAKnG,KAChCgG,EAAgB,SAAeG,EAAKvC,QACpCoC,EAAgB,OAAarF,SAASwF,EAAK7F,QAC3C0F,EAAgB,QAAhB,OAAwCrF,SAASwF,EAAK7F,QACtD0F,EAAgB,QAAhB,KAAsCG,EAAK3F,SAC3CwF,EAAgB,mBAAyB,IAG3C/G,EAAKiB,OAAOkB,KAAK4E,GAEjB,IAAIK,EAAgBpH,EAAKgC,MAAMoF,cAAclF,QAC7CkF,EAAcjF,KAAK4E,GAEnB/G,EAAKoC,SAAS,CAAEgF,iBAAiB,eAxnBhBpH,EA4nBnBO,eAAiB,SAAA0B,GACf,IAAIoF,EAAe,GACnBpF,EAAUrB,QAAQ,SAAA0G,GAChBD,EAAY,GAASC,EAAOnG,GAC5BkG,EAAY,SAAeC,EAAO9D,SAClC6D,EAAY,OAAaC,EAAOjG,OAChCgG,EAAY,SAAeC,EAAO/F,WAIpC,IAAIgG,EAAavH,EAAKgC,MAAMuF,WAAWrF,QACvCqF,EAAWpF,KAAKkF,GAEhBrH,EAAKoC,SAAS,CAAEmF,cAAc,eAvoB9BvH,EAAKgC,MAAQ,CACXpC,IAAK,KACL4H,IAAK,KACLvG,OAAQ,GACRwG,aAAc,GACdC,kBAAmB,GACnBpB,eAAgB,GAChBqB,cAAe,GACfP,cAAe,GACfG,WAAY,GACZK,yBAA0B,GAC1BnD,kBAAmB,GACnBC,qBAAsB,GACtBE,oBAAqB,GACrBC,sBAAuB,GACvBgD,qBAAsB,KACtBV,SAAU,IAlBKnH,mFAsBC,IAAAuC,EAAApC,KAEd2H,ELhCC,IAAIC,QAAQ,SAASC,EAASC,GAEnCC,OAAOC,yBAA2B,WAEhCH,EAAQE,OAAOE,eAERF,OAAOC,0BAGhB,IAAME,EAAS9C,SAAS7C,cAAc,UAEtC2F,EAAOC,IAAP,gEAAAC,OADgB,0CAChB,sCACAF,EAAOG,OAAQ,EACfjD,SAASkD,KAAKC,YAAYL,KKsBtBM,EAAYC,EAAQ,IAGxBV,OAAOW,UAAUC,YAAYC,mBAC3B,SAAAvF,GAAQ,OACNjB,EAAKH,SAAS,CACZxC,IAAKoJ,WAAWxF,EAASyF,OAAOC,UAChC1B,IAAKwB,WAAWxF,EAASyF,OAAOE,cAEpC,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,KAGrBrB,QAAQwB,IAAI,CAACzB,IACV0B,KAAK,SAAAC,GACJ,IAAIrB,EAASqB,EAAO,GACpBlH,EAAK6F,OAASA,EACd7F,EAAKtB,OAAS,GACdsB,EAAKiE,QAAU,GACfjE,EAAKmH,gBAAkB,GACvBnH,EAAKoH,qBAAuB,GAC5BpH,EAAKqH,WAAa,IAAIxB,EAAOyB,KAAKC,OAChCvH,EAAKP,MAAMpC,IACX2C,EAAKP,MAAMwF,KAEbjF,EAAKoE,WAAa,IAAIyB,EAAOyB,KAAKE,WAAW,CAC3CC,SAAU,MAEZzH,EAAK0H,QAAU,GACf1H,EAAK0E,WAAa,GAClB1E,EAAK2H,cAAgB,GACrB3H,EAAKM,IAAM,IAAIuF,EAAOyB,KAAKM,IAAI5E,SAASC,eAAe,OAAQ,CAC7D4E,KAAM,GACNC,OAAQ,CACNzK,IAAK2C,EAAKP,MAAMpC,IAChBC,IAAK0C,EAAKP,MAAMwF,KAElB8C,OAAQ,CACN,CACEC,YAAa,MACbC,QAAS,CAAC,CAAEC,WAAY,YAM9B,IAAIC,EAAU,IAAItC,EAAOyB,KAAK5I,OAAO0J,cAAcpI,EAAKM,KAGpD+H,EAAa,CACfC,IAAK,sFACLC,KAAM,IAAI1C,EAAOyB,KAAKkB,KAAK,GAAI,IAC/BC,OAAQ,IAAI5C,EAAOyB,KAAKoB,MAAM,EAAG,GACjCC,OAAQ,IAAI9C,EAAOyB,KAAKoB,MAAM,GAAI,IAClCE,WAAY,IAAI/C,EAAOyB,KAAKkB,KAAK,GAAI,MAGnB,SAAAK,GAElB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAOE,OAAQD,IACjC9I,EAAKtB,OAAOkB,KAAKiJ,EAAOC,IAI1BD,EAAOxK,QAAQ,SAAA2K,GACb,IAAIC,EAAeD,EAAMnK,SACrBsG,EAAoB6D,EAAMvE,QAI9B,IAAK,IAAIyE,KAAoBF,EAC3BhJ,EAAKoH,qBAAqB6B,GAAgB9D,EAE5CnF,EAAKH,SAAS,CAAEsF,kBAAmBnF,EAAKoH,yBAI5C+B,CAAc/C,GAId+B,EAAQiB,aACN,CAAE/J,SAAUW,EAAKqH,WAAYgC,OAAQ,MAAO/H,KAAM,CAAC,eACnD,SAACoG,EAAS4B,GAER,GAAe,OAAXA,EAAJ,CAEA5B,EAAQrJ,QAAQ,SAAAkL,QACQC,IAAlBD,EAAOzK,QACTkB,EAAK0H,QAAQ9H,KAAK2J,KAItB,IAAK,IAAIT,EAAI,EAAGA,EAAI9I,EAAK0H,QAAQqB,OAAQD,IAAK,CAC5C,IACIW,EAAU,CACZC,QAFW1J,EAAK0H,QAAQoB,GAERjK,SAChB8K,OAAQ,CACN,WACA,OACA,WACA,SACA,UACA,qBACA,aAKJxB,EAAQyB,WAAWH,EAAS,SAAC9K,EAAO2K,GAClC,GAAIA,IAAWzD,EAAOyB,KAAK5I,OAAOmL,oBAAoBC,GAAI,CACxDhD,QAAQC,IAAIpI,GAEZ,IAAIoL,EAAUpL,EAAME,SAChBqG,EAAevG,EAAM8F,QAIzB,IAAK,IAAIuF,KAAerL,EACtBqB,EAAKmH,gBAAgB4C,GAAW7E,EAElClF,EAAKH,SAAS,CAAEqF,aAAclF,EAAKmH,qBAIzC8C,EAAYjK,EAAK0H,YAKrB7B,EAAOyB,KAAK3F,MAAMuI,YAAYlK,EAAKM,IAAK,QAAS,SAAAqB,GAC/C,IAAIe,EAAgBM,SAASC,eAAe,iBAU5CjD,EAAKH,SAAS,CAAE+E,SANZ,IACAtF,KAAK6K,SACFC,SAAS,IACTC,OAAO,EAAG,IAGuB,cAGN,KAAhC3H,EAAc1B,MAAMkC,SACY,SAAhCR,EAAc1B,MAAMkC,SAEpBR,EAAc1B,MAAMkC,QAAU,QAC9BoH,EAAc3I,EAAM4I,QACpBvK,EAAKH,SAAS,CAAEyF,qBAAsB3D,EAAM4I,QAAU,eAEtD7H,EAAc1B,MAAMkC,QAAU,SAIbF,SAASM,cAAc,wBAE7BkH,iBAAiB,QAAS,WAEJ,KAAjCxK,EAAKP,MAAMyC,mBACyB,KAApClC,EAAKP,MAAM0C,sBACXnC,EAAKP,MAAM4C,qBAAuB,GACG,KAArCrC,EAAKP,MAAM6C,uBAEXmI,MAKJ,IAAIA,EAAY,WACd,IAAIC,EAAoB,IAAI7E,EAAOyB,KAAKqD,OAAO,CAC7CrK,IAAKN,EAAKM,IACV1B,GAAIoB,EAAKP,MAAMmF,SACf3D,SAAUjB,EAAKP,MAAM6F,qBACrBjI,IAAK2C,EAAKP,MAAM6F,qBAAqBjI,MACrCC,IAAK0C,EAAKP,MAAM6F,qBAAqBhI,MACrCsN,UAAW/E,EAAOyB,KAAKuD,UAAUC,KACjCxG,MAAOtE,EAAKP,MAAMyC,kBAClBpD,OAAQK,SAASa,EAAKP,MAAM4C,qBAC5B0I,KAAM1C,IAERrI,EAAKiE,QAAQrE,KAAK8K,GAGlB7E,EAAOyB,KAAK3F,MAAMuI,YAAYQ,EAAmB,QAAS,WAGxD,IAYIM,EAZiB,SAAA/J,GACnBA,EAAWyJ,EAAkBzJ,SAC7B,IAAIgK,EAAuB,GAQ3B,OANAjL,EAAKP,MAAMoF,cAAcxG,QAAQ,SAAA6M,GAC3BA,EAAiBjK,WAAaA,GAChCgK,EAAqBrL,KAAKsL,KAIvBD,EAEeE,GAepBC,EAX2B,SAAAnK,GAC7BA,EAAWyJ,EAAkBzJ,SAC7B,IAAIoK,EAAiC,GAOrC,OALArL,EAAKP,MAAMuF,WAAW3G,QAAQ,SAAA0G,GACxBA,EAAO9D,WAAaA,GACtBoK,EAA+BzL,KAAKmF,KAGjCsG,EAEyBC,GAG9BC,EAAY,8DAAAvF,OAER0E,EAAkBpG,MAFV,mDAAA0B,OAGcgF,EACzB1K,IAAI,SAAA4D,GACH,MACE,cACAA,EAAOO,QAAQ3F,OACf,+BAEAoF,EAAOO,QAAQ+G,KACf,SAGHC,KAAK,IAdM,mDAAAzF,OAemBoF,EAC9B9K,IAAI,SAAAyE,GACH,MACE,cACAA,EAAOjG,OACP,+BAEAiG,EAAO/F,SACP,SAGHyM,KAAK,IA1BM,0EAAAzF,OA4BkB7I,EAC5BuN,GA7BU,6CAkChB1K,EAAKoE,WAAWC,WAAWkH,GAC3BvL,EAAKoE,WAAWG,KAAKvE,EAAKM,IAAKoK,MAM/BJ,EAAgB,SAAAjL,GAClB,IAAIqM,EAAgB,IAAI7F,EAAOyB,KAAKqD,OAAO,CACzC1J,SAAU5B,EACViB,IAAKN,EAAKM,IACVqL,SAAS,IAGX3L,EAAK0E,WAAW9E,KAAK8L,IAInBzB,EAAc,SAAAvL,GAAU,IAAAkN,GAAA,EAAAC,GAAA,EAAAC,OAAAtC,EAAA,IAC1B,IAD0B,IAC1BuC,EAD0BC,EAAA,eACjBrN,EADiBoN,EAAAtN,MAEpBrB,EAAqB,IAAIyI,EAAOyB,KAAKqD,OAAO,CAC9CrK,IAAKN,EAAKM,IACV1B,GAAID,EAAME,SACVxB,IAAKsB,EAAMS,SAASC,SAAShC,MAC7BC,IAAKqB,EAAMS,SAASC,SAAS/B,MAC7B2D,SAAUtC,EAAMS,SAASC,SACzB0L,KAAM1C,EACN/D,MAAO3F,EAAMH,KACboM,UAAW/E,EAAOyB,KAAKuD,UAAUC,KACjChM,OAAQH,EAAMG,SAEhBkB,EAAKtB,OAAOkB,KAAKjB,GACjBqB,EAAKiE,QAAQrE,KAAKxC,GAClB4C,EAAKH,SAAS,CAAEnB,OAAQsB,EAAKtB,SAC7BsB,EAAKH,SAAS,CAAEkE,eAAgB/D,EAAKtB,SAErCtB,EAAmB8M,YAAY,QAAS,WAEI,OAAtC9M,EAAmB6O,eACrB7O,EAAmB8O,aAAa,MAEhC9O,EAAmB8O,aAAarG,EAAOyB,KAAKuD,UAAUsB,QAExDC,WAAW,WACThP,EAAmB8O,aAAa,OAC/B,QAILrG,EAAOyB,KAAK3F,MAAMuI,YAAY9M,EAAoB,QAAS,WAGzD,IAcIiP,EAdgB,SAAAC,GAClBA,EAAelP,EAAmBwB,GAClC,IAAI2N,EAAkB,GAEtB,IAAK,IAAIxH,KAAU/E,EAAKP,MAAMyF,aAE5B,GAAIoH,EAAaE,QAAQzH,IAAW,EAElC,OADAwH,EAAgBxH,GAAU/E,EAAKP,MAAMyF,aAAaH,GAC3CwH,EAKSE,GACoBrP,EAAmBwB,IAgBzD8N,EAZmB,SAAAJ,GACrBA,EAAelP,EAAmBwB,GAClC,IAAI+N,EAAwB,GAO5B,OALA3M,EAAKP,MAAMuF,WAAW3G,QAAQ,SAAA0G,GACxBA,EAAOnG,KAAO0N,GAChBK,EAAsB/M,KAAKmF,KAGxB4H,EAGgBC,GAGrBC,EAAS,oEAAA7G,OAEH5I,EAAmBkH,MAFhB,yDAAA0B,OAGiBqG,EACzB/L,IAAI,SAAAyE,GACH,MACE,aACAA,EAAO+H,YACP,mBAEA/H,EAAOjG,OACP,+BAEAiG,EAAOyG,KACP,SAGHC,KAAK,IAjBG,mDAAAzF,OAkBoB0G,EAC5BpM,IAAI,SAAAyE,GACH,MACE,cACAA,EAAOjG,OACP,+BAEAiG,EAAO/F,SACP,SAGHyM,KAAK,IA7BG,0GAAAzF,OAgCqB7I,EAC5BC,GAjCO,+CAsCb4C,EAAKoE,WAAWC,WAAWwI,GAC3B7M,EAAKoE,WAAWG,KAAKvE,EAAKM,IAAKlD,MAzGnC2P,EAAkBrO,EAAlBsO,OAAAC,cAAArB,GAAAG,EAAAgB,EAAAG,QAAAC,MAAAvB,GAAA,EAA0BI,IADA,MAAAnF,GAAAgF,GAAA,EAAAC,EAAAjF,EAAA,YAAA+E,GAAA,MAAAmB,EAAAK,QAAAL,EAAAK,SAAA,WAAAvB,EAAA,MAAAC,MAiHV,SAAApN,GAAU,IAAA2O,GAAA,EAAAC,GAAA,EAAAC,OAAA/D,EAAA,IAC1B,IAD0B,IAC1BgE,EAD0BC,EAAA,eACjB9O,EADiB6O,EAAA/O,MAEpBiP,EAAe,IAAI7H,EAAOyB,KAAKqD,OAAO,CACxCrK,IAAKN,EAAKM,IACV1B,GAAID,EAAME,SACVxB,IAAKsB,EAAMS,SAASC,SAAShC,IAC7BC,IAAKqB,EAAMS,SAASC,SAAS/B,IAC7B2D,SAAUtC,EAAMS,SAASC,SACzBiF,MAAO3F,EAAMH,KACboM,UAAW/E,EAAOyB,KAAKuD,UAAUC,KACjChM,OAAQH,EAAMG,OACdiM,KAAM1C,IAERrI,EAAKiE,QAAQrE,KAAK8N,GAGlB7H,EAAOyB,KAAK3F,MAAMuI,YAAYwD,EAAc,QAAS,WAEnD,IAgBIC,EAhBqB,SAAArB,GACvBA,EAAeoB,EAAa9O,GAC5B,IAAIgP,EAAuB,GAE3B,IAAK,IAAI7I,KAAU/E,EAAKP,MAAM0F,kBAE5B,GAAImH,EAAaE,QAAQzH,IAAW,EAIlC,OAHA6I,EAAqB7I,GAAU/E,EAAKP,MAAM0F,kBACxCJ,GAEK6I,EAIcC,GAGJH,EAAa9O,IAgBhC8N,EAZmB,SAAAJ,GACrBA,EAAeoB,EAAa9O,GAC5B,IAAI+N,EAAwB,GAO5B,OALA3M,EAAKP,MAAMuF,WAAW3G,QAAQ,SAAA0G,GACxBA,EAAOnG,KAAO0N,GAChBK,EAAsB/M,KAAKmF,KAGxB4H,EAGgBC,GAErBkB,EAAkB,oEAAA9H,OAEZ0H,EAAapJ,MAFD,qDAAA0B,OAGQ2H,EACzBrN,IAAI,SAAAyE,GACH,MACE,cACAA,EAAOjG,OACP,+BAEAiG,EAAOyG,KACP,SAGHC,KAAK,IAdY,qDAAAzF,OAea0G,EAC9BpM,IAAI,SAAAyE,GACH,MACE,cACAA,EAAOjG,OACP,+BAEAiG,EAAO/F,SACP,SAGHyM,KAAK,IA1BY,0GAAAzF,OA6BY7I,EAC5BuQ,GA9BgB,+CAmCtB1N,EAAKoE,WAAWC,WAAWyJ,GAC3B9N,EAAKoE,WAAWG,KAAKvE,EAAKM,IAAKoN,MAxFnCK,EAAkBrP,EAAlBsO,OAAAC,cAAAI,GAAAG,EAAAO,EAAAb,QAAAC,MAAAE,GAAA,EAA0BI,IADA,MAAA5G,GAAAyG,GAAA,EAAAC,EAAA1G,EAAA,YAAAwG,GAAA,MAAAU,EAAAX,QAAAW,EAAAX,SAAA,WAAAE,EAAA,MAAAC,IA+F5BS,CAAY5H,GAGZ,IAAI6H,EAAe,CAAE5Q,IAAK2C,EAAKP,MAAMpC,IAAKC,IAAK0C,EAAKP,MAAMwF,KACpC,IAAIY,EAAOyB,KAAKqD,OAAO,CAC3CrK,IAAKN,EAAKM,IACVW,SAAUgN,EACVrD,UAAW/E,EAAOyB,KAAKuD,UAAUC,QAIjB,WAChB,IACIlJ,EAAU,GAEd5B,EAAKP,MAAMf,OAAOL,QAAQ,SAAAM,GACxB,IAAIoL,EAAUpL,EAAME,SACpB+C,EAAQmI,GAAWpL,EAAMG,SANL,IAAAoP,EAAA,SASbpP,GACP,IAAIqP,EAAkBvM,EAAQ9C,GATb,EASqC,IAClDsP,EAAqB,GAAApI,OACvB,GAD6B1G,KAAKC,MAAM4O,EAAiB,IAAlC,KAETnL,SAASqL,iBAAT,IAAArI,OACVlH,EADU,kBAINT,QAAQ,SAAAiQ,GAChBA,EAAStN,MAAMuN,MAAQH,KAT3B,IAAK,IAAItP,KAAU8C,EAASsM,EAAnBpP,GAaX0P,KAEDC,MAAM,SAAAC,GACL5H,QAAQC,IAAI2H,GACZ3P,MAAM,4DAiHV,OACEkB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwO,EAAD,MACA1O,EAAAC,EAAAC,cAAA,OAAKvB,GAAG,QACRqB,EAAAC,EAAAC,cAACyO,EAAD,CACErM,UAAW3E,KAAK2E,UAChBL,kBAAmBtE,KAAKsE,kBACxBC,qBAAsBvE,KAAKuE,qBAC3BE,oBAAqBzE,KAAKyE,oBAC1BC,sBAAuB1E,KAAK0E,wBAE9BrC,EAAAC,EAAAC,cAAC0O,EAAD,CACEnQ,OAAQd,KAAK6B,MAAMsE,eACnB/F,eAAgBJ,KAAKI,eACrByC,cAAe7C,KAAK6C,eAEpBR,EAAAC,EAAAC,cAAC2O,EAAD,CAAepN,aAAc9D,KAAK8D,wBA9pB1BF,aCLlBuN,IAASC,OAAO/O,EAAAC,EAAAC,cAAC8O,EAAD,MAASjM,SAASM,cAAc","file":"static/js/main.bcb415c8.chunk.js","sourcesContent":["// Load Google Maps\r\nexport function load_google_maps() {\r\n  return new Promise(function(resolve, reject) {\r\n    // define the global callback that will run when google maps is loaded\r\n    window.resolveGoogleMapsPromise = function() {\r\n      // resolve the google object\r\n      resolve(window.google);\r\n      // delete the global callback to tidy up since it is no longer needed\r\n      delete window.resolveGoogleMapsPromise;\r\n    };\r\n    // Now, Load the Google Maps API\r\n    const script = document.createElement('script');\r\n    const API_KEY = 'AIzaSyBdfaGvQ20-Yvwx7FUtPqfvC2jrDHDGlxY';\r\n    script.src = `https://maps.googleapis.com/maps/api/js?libraries=places&key=${API_KEY}&callback=resolveGoogleMapsPromise`;\r\n    script.async = true;\r\n    document.body.appendChild(script);\r\n  });\r\n}\r\n\r\nexport function getGoogleImage(restaurantsMarkers) {\r\n  return (\r\n    'https://maps.googleapis.com/maps/api/streetview?size=300x300&location=' +\r\n    restaurantsMarkers.lat +\r\n    ',' +\r\n    restaurantsMarkers.lng +\r\n    '&heading=151.78&pitch=-0.76&key=AIzaSyBdfaGvQ20-Yvwx7FUtPqfvC2jrDHDGlxY'\r\n  );\r\n}\r\n","import \"./sidebar.css\";\r\nimport React, { Component } from \"react\";\r\nimport StarRatingComponent from \"react-star-rating-component\";\r\n\r\nclass Sidebar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      addReview: []\r\n    };\r\n  }\r\n\r\n  onReviewSubmit = e => {\r\n    const details = {};\r\n\r\n    // Find the TEXTAREA and SELECT tag from the form\r\n    e.target.childNodes.forEach(el => {\r\n      if (el.tagName === \"TEXTAREA\" || el.tagName === \"SELECT\")\r\n        // Add the value from the TEXTAREA and SELECT tag to the details object\r\n        details[el.name] = el.value;\r\n    });\r\n\r\n    // Find the matching ID between the places props and the place ID from the form\r\n    this.props.places.forEach(place => {\r\n      if (e.target.id === place.place_id) {\r\n        // Simple form validation\r\n        if (details.rating === \"Choose Rating\") {\r\n          alert(\"Please select a rating for the restaurant on the sidebar\");\r\n          return false;\r\n        }\r\n\r\n        if (details.feedback === \"\") {\r\n          alert(\"Please write a review for the restaurant on the sidebar\");\r\n          return false;\r\n        }\r\n\r\n        let ratingSum = place.rating * place.user_ratings_total;\r\n        let currentRatingSum = ratingSum + parseInt(details.rating);\r\n\r\n        if (details.rating >= 0 && details.feedback !== \"\") {\r\n          // Add the ID to the details object\r\n          details[\"id\"] = place.place_id;\r\n          details[\"position\"] = place.geometry.location;\r\n\r\n          // Increase the sum of user_ratings_total when the form has submitted\r\n          place.user_ratings_total++;\r\n        }\r\n\r\n        /* Update the average rating when the form is submitted\r\n        Round the number to one decimal place */\r\n        place.rating =\r\n          Math.round((currentRatingSum / place.user_ratings_total) * 10) / 10;\r\n      }\r\n    });\r\n\r\n    // Push the details object to the addReview state\r\n    const newReview = this.state.addReview.slice();\r\n    newReview.push(details);\r\n\r\n    // Set the state of the addReview and pass the value to App.js\r\n    this.setState({ addReview: newReview }, () => {\r\n      this.props.onReviewSubmit(this.state.addReview);\r\n    });\r\n    e.preventDefault();\r\n    this.clearInput(e);\r\n  };\r\n\r\n  // Clear the form value after it has submitted\r\n  clearInput = e => {\r\n    e.target.childNodes.forEach(el => {\r\n      if (el.tagName === \"TEXTAREA\") {\r\n        el.value = null;\r\n      }\r\n      if (el.tagName === \"SELECT\") {\r\n        el.value = \"Choose Rating\";\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id='right-panel'>\r\n        <div className='right-panel-container'>\r\n          <div className='restaurantsFilter'>{this.props.children}</div>\r\n          <div id='places'>\r\n            {this.props.places.map(place => (\r\n              <div\r\n                key={place.place_id}\r\n                className='restaurants'\r\n                onClick={() => {\r\n                  this.props.listItemClick(place);\r\n                }}\r\n              >\r\n                <div className='restaurantName'> {place.name} </div>\r\n                <div className='starRating'>\r\n                  <div className='numberRating'>{place.rating}</div>\r\n                  <StarRatingComponent\r\n                    name='rating'\r\n                    starColor='#ffb400'\r\n                    emptyStarColor='#ffb400'\r\n                    value={place.rating}\r\n                    renderStarIcon={(index, value) => {\r\n                      return (\r\n                        <span>\r\n                          <i\r\n                            className={\r\n                              index <= value ? \"fas fa-star\" : \"far fa-star\"\r\n                            }\r\n                          />\r\n                        </span>\r\n                      );\r\n                    }}\r\n                    renderStarIconHalf={() => {\r\n                      return (\r\n                        <span>\r\n                          <span style={{ position: \"absolute\" }}>\r\n                            <i className='far fa-star' />\r\n                          </span>\r\n                          <span>\r\n                            <i className='fas fa-star-half' />\r\n                          </span>\r\n                        </span>\r\n                      );\r\n                    }}\r\n                  />\r\n                  <div className='userRatingsTotal'>\r\n                    ({place.user_ratings_total})\r\n                  </div>\r\n                </div>\r\n                <div className='placeAddress'>{place.vicinity}</div>\r\n\r\n                <div className='addReview'>\r\n                  <form onSubmit={this.onReviewSubmit} id={place.place_id}>\r\n                    <select\r\n                      className='ratingForm__input ratingForm__input--select'\r\n                      id='chooseRating'\r\n                      name='rating'\r\n                      required\r\n                    >\r\n                      <option value='Choose Rating' autoFocus>\r\n                        Choose Rating\r\n                      </option>\r\n                      <option value='0'>0</option>\r\n                      <option value='1'>1</option>\r\n                      <option value='2'>2</option>\r\n                      <option value='3'>3</option>\r\n                      <option value='4'>4</option>\r\n                      <option value='5'>5</option>\r\n                    </select>\r\n\r\n                    <textarea\r\n                      type='text'\r\n                      className='ratingForm__input ratingForm__input--textarea'\r\n                      id='feedback'\r\n                      name='feedback'\r\n                      placeholder='Write your review'\r\n                    />\r\n                    <input type='submit' value='Submit' id={place.place_id} />\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { Component } from 'react';\r\n\r\nclass RatingsFilter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { ratings: '' };\r\n  }\r\n\r\n  onFormSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.onFormSubmit(this.state.ratings);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className='filterLabel'>\r\n        <form onSubmit={this.onFormSubmit}>\r\n          <label htmlFor='selectRating'>Rating at least:</label>\r\n          <select\r\n            id='selectRating'\r\n            value={this.state.ratings}\r\n            onChange={e => this.setState({ ratings: e.target.value })}\r\n          >\r\n            <option value='0.0'>Any rating</option>\r\n            <option value='2.0'>2.0</option>\r\n            <option value='2.5'>2.5</option>\r\n            <option value='3.0'>3.0</option>\r\n            <option value='3.5'>3.5</option>\r\n            <option value='4.0'>4.0</option>\r\n            <option value='4.5'>4.5</option>\r\n          </select>\r\n          <input type='submit' value='Submit' />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RatingsFilter;\r\n","import './addrestaurants.css';\r\nimport React, { Component } from 'react';\r\n\r\nclass AddRestaurants extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: '',\r\n      address: '',\r\n      rating: '',\r\n      feedback: '',\r\n      newRestaurant: {},\r\n      newRestaurantList: []\r\n    };\r\n  }\r\n\r\n  // Get the values from the form and set the state for name, address, rating, and feedback\r\n  onChangeInput = e => {\r\n    const target = e.target;\r\n    const name = target.name;\r\n    const value = target.value;\r\n\r\n    this.setState({ [name]: value }, () => {\r\n      this.props.newRestaurantName(this.state.name);\r\n      this.props.newRestaurantAddress(this.state.address);\r\n      this.props.newRestaurantRating(this.state.rating);\r\n      this.props.newRestaurantFeedback(this.state.feedback);\r\n    });\r\n  };\r\n\r\n  // Add form values to the newRestaurant object\r\n  newSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    this.setState(\r\n      Object.assign(this.state.newRestaurant, {\r\n        name: this.state.name,\r\n        address: this.state.address,\r\n        rating: this.state.rating,\r\n        feedback: this.state.feedback\r\n      }),\r\n      () => {\r\n        this.addRestaurant();\r\n      }\r\n    );\r\n\r\n    this.handleSubmit();\r\n  };\r\n\r\n  // Push the newRestaurant object to newRestaurantList array\r\n  addRestaurant = () => {\r\n    let addNewRestaurantList = [...this.state.newRestaurantList];\r\n    addNewRestaurantList.push({ ...this.state.newRestaurant });\r\n\r\n    this.setState({ newRestaurantList: addNewRestaurantList }, () => {\r\n      // Pass the newRestaurantList array to App.js\r\n      this.props.newSubmit(this.state.newRestaurantList);\r\n      this.clearInput();\r\n    });\r\n  };\r\n\r\n  // Clear the form value after it was submitted\r\n  clearInput = () => {\r\n    this.setState({\r\n      name: '',\r\n      address: '',\r\n      rating: 'Choose Rating',\r\n      feedback: ''\r\n    });\r\n    this.setState(\r\n      Object.assign(this.state.newRestaurant, {\r\n        name: '',\r\n        address: '',\r\n        rating: '',\r\n        feedback: ''\r\n      })\r\n    );\r\n  };\r\n\r\n  // Hide the form after it was submitted\r\n  handleSubmit = () => {\r\n    document.getElementById('addRestaurant').style.display = 'none';\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div id='addRestaurant'>\r\n          <h4>Add a New Restaurant</h4>\r\n          <form className='contactForm' onSubmit={this.newSubmit}>\r\n            <input\r\n              type='text'\r\n              className='contactForm__input contactForm__input--text'\r\n              id='name'\r\n              name={'name'}\r\n              value={this.state.name}\r\n              onChange={this.onChangeInput}\r\n              placeholder='Restaurant Name'\r\n              required\r\n            />\r\n\r\n            <textarea\r\n              type='text'\r\n              className='contactForm__input contactForm__input--textarea'\r\n              id='address'\r\n              name='address'\r\n              value={this.state.address}\r\n              onChange={this.onChangeInput}\r\n              placeholder='Restaurant Address'\r\n              required\r\n            />\r\n\r\n            <select\r\n              className='contactForm__input contactForm__input--select'\r\n              id='rating'\r\n              name='rating'\r\n              value={this.state.rating}\r\n              onChange={this.onChangeInput}\r\n              required\r\n            >\r\n              <option value='' autoFocus>\r\n                Choose Rating\r\n              </option>\r\n              <option value='0'>0</option>\r\n              <option value='1'>1</option>\r\n              <option value='2'>2</option>\r\n              <option value='3'>3</option>\r\n              <option value='4'>4</option>\r\n              <option value='5'>5</option>\r\n            </select>\r\n\r\n            <textarea\r\n              type='text'\r\n              className='contactForm__input contactForm__input--textarea'\r\n              id='feedback'\r\n              name='feedback'\r\n              value={this.state.feedback}\r\n              onChange={this.onChangeInput}\r\n              placeholder='Write Your feedback'\r\n              required\r\n            />\r\n\r\n            <button\r\n              className='contactForm__button'\r\n              type='submit'\r\n              onSubmit={this.handleSubmit}\r\n            >\r\n              Submit\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddRestaurants;\r\n","import \"./header.css\";\r\nimport React, { Component } from \"react\";\r\n\r\nclass Header extends Component {\r\n  detectEvent = () => {\r\n    let closeIcon = document.querySelector(\".closeIcon\");\r\n    let sideBar = document.querySelector(\"#right-panel\");\r\n\r\n    closeIcon.classList.toggle(\"change\");\r\n    if (sideBar.style.display === \"\" || sideBar.style.display === \"block\") {\r\n      sideBar.style.display = \"none\";\r\n    } else {\r\n      sideBar.style.display = \"block\";\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div id='header'>Restaurants Review</div>\r\n        <div className='closeIcon' onClick={this.detectEvent}>\r\n          <div className='bar1' />\r\n          <div className='bar2' />\r\n          <div className='bar3' />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import \"./App.css\";\r\nimport React, { Component } from \"react\";\r\nimport { load_google_maps } from \"../api/googlemaps\";\r\nimport { getGoogleImage } from \"../api/googlemaps\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport RatingsFilter from \"./RatingsFilter\";\r\nimport AddRestaurants from \"./AddRestaurants\";\r\nimport Header from \"./Header\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      lat: null,\r\n      lon: null,\r\n      places: [],\r\n      placeReviews: {},\r\n      localPlaceReviews: {},\r\n      filteredPlaces: [],\r\n      newReviewList: [],\r\n      newMarkersArr: [],\r\n      newReviews: [],\r\n      newReviewsNewRestaurants: [],\r\n      newRestaurantName: \"\",\r\n      newRestaurantAddress: \"\",\r\n      newRestaurantRating: \"\",\r\n      newRestaurantFeedback: \"\",\r\n      currentClickLocation: null,\r\n      randomID: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Load Google maps API from api/googlemaps.js\r\n    let get_google = load_google_maps();\r\n\r\n    // Get the the local JSON data from api/restaurants.json\r\n    let localJson = require(\"../api/restaurants.json\");\r\n\r\n    // Get the user coordinate\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      position =>\r\n        this.setState({\r\n          lat: parseFloat(position.coords.latitude),\r\n          lon: parseFloat(position.coords.longitude)\r\n        }),\r\n      err => console.log(err)\r\n    );\r\n\r\n    Promise.all([get_google])\r\n      .then(values => {\r\n        let google = values[0];\r\n        this.google = google;\r\n        this.places = [];\r\n        this.markers = [];\r\n        this.placeReviewsObj = {};\r\n        this.localPlaceReviewsObj = {};\r\n        this.currentPos = new google.maps.LatLng(\r\n          this.state.lat,\r\n          this.state.lon\r\n        );\r\n        this.infowindow = new google.maps.InfoWindow({\r\n          maxWidth: 450\r\n        });\r\n        this.results = [];\r\n        this.newMarkers = [];\r\n        this.newMarkersObj = {};\r\n        this.map = new google.maps.Map(document.getElementById(\"map\"), {\r\n          zoom: 18,\r\n          center: {\r\n            lat: this.state.lat,\r\n            lng: this.state.lon\r\n          },\r\n          styles: [\r\n            {\r\n              featureType: \"poi\",\r\n              stylers: [{ visibility: \"off\" }]\r\n            }\r\n          ]\r\n        });\r\n\r\n        // Google places library, place details Requests\r\n        let service = new google.maps.places.PlacesService(this.map);\r\n\r\n        // Icon for the restaurants marker\r\n        let markerIcon = {\r\n          url: \"https://cdn1.imggmi.com/uploads/2019/10/7/51efdca769118eae5795ee40094b51a8-full.png\",\r\n          size: new google.maps.Size(71, 71),\r\n          origin: new google.maps.Point(0, 0),\r\n          anchor: new google.maps.Point(17, 34),\r\n          scaledSize: new google.maps.Size(25, 25)\r\n        };\r\n\r\n        let showLocalJSON = locals => {\r\n          // Push data from local JSON to this.places\r\n          for (let i = 0; i < locals.length; i++) {\r\n            this.places.push(locals[i]);\r\n          }\r\n\r\n          // Get the local place reviews\r\n          locals.forEach(local => {\r\n            let localPlaceID = local.place_id;\r\n            let localPlaceReviews = local.reviews;\r\n\r\n            /* Push the local place reviews that are associated with the place ID \r\n            to the localPlaceReviewsObj and set the localPlaceReviews state */\r\n            for (let localPlaceDetail in local) {\r\n              this.localPlaceReviewsObj[localPlaceID] = localPlaceReviews;\r\n            }\r\n            this.setState({ localPlaceReviews: this.localPlaceReviewsObj });\r\n          });\r\n        };\r\n\r\n        showLocalJSON(localJson);\r\n\r\n        /* Search the nearest restaurants from the Google places library\r\n        based on the current user coordinate */\r\n        service.nearbySearch(\r\n          { location: this.currentPos, radius: \"150\", type: [\"restaurant\"] },\r\n          (results, status) => {\r\n            // console.log(results);\r\n            if (status !== \"OK\") return;\r\n\r\n            results.forEach(result => {\r\n              if (result.rating !== undefined) {\r\n                this.results.push(result);\r\n              }\r\n            });\r\n\r\n            for (let i = 0; i < this.results.length; i++) {\r\n              let places = this.results[i];\r\n              let request = {\r\n                placeId: places.place_id,\r\n                fields: [\r\n                  \"geometry\",\r\n                  \"name\",\r\n                  \"place_id\",\r\n                  \"rating\",\r\n                  \"reviews\",\r\n                  \"user_ratings_total\",\r\n                  \"vicinity\"\r\n                ]\r\n              };\r\n\r\n              // Get the place details\r\n              service.getDetails(request, (place, status) => {\r\n                if (status === google.maps.places.PlacesServiceStatus.OK) {\r\n                  console.log(place);\r\n\r\n                  let placeID = place.place_id;\r\n                  let placeReviews = place.reviews;\r\n\r\n                  /* Push place reviews that are associated with the place ID to the placeReviewsObj \r\n                  and set the placeReviews state */\r\n                  for (let placeDetail in place) {\r\n                    this.placeReviewsObj[placeID] = placeReviews;\r\n                  }\r\n                  this.setState({ placeReviews: this.placeReviewsObj });\r\n                }\r\n              });\r\n            }\r\n            viewMarkers(this.results);\r\n          }\r\n        );\r\n\r\n        // Event listener to add new markers\r\n        google.maps.event.addListener(this.map, \"click\", event => {\r\n          let addRestaurant = document.getElementById(\"addRestaurant\");\r\n          // Create random ID for the new restaurant\r\n          let randomID = () => {\r\n            return (\r\n              \"_\" +\r\n              Math.random()\r\n                .toString(36)\r\n                .substr(2, 9)\r\n            );\r\n          };\r\n          this.setState({ randomID: randomID() }, () => { });\r\n\r\n          if (\r\n            addRestaurant.style.display === \"\" ||\r\n            addRestaurant.style.display === \"none\"\r\n          ) {\r\n            addRestaurant.style.display = \"block\";\r\n            addTempMarker(event.latLng);\r\n            this.setState({ currentClickLocation: event.latLng }, () => { });\r\n          } else {\r\n            addRestaurant.style.display = \"none\";\r\n          }\r\n        });\r\n\r\n        let contactFormBtn = document.querySelector(\".contactForm__button\");\r\n\r\n        contactFormBtn.addEventListener(\"click\", () => {\r\n          if (\r\n            this.state.newRestaurantName !== \"\" &&\r\n            this.state.newRestaurantAddress !== \"\" &&\r\n            this.state.newRestaurantRating >= 0 &&\r\n            this.state.newRestaurantFeedback !== \"\"\r\n          ) {\r\n            addMarker();\r\n          }\r\n        });\r\n\r\n        // Add new markers\r\n        let addMarker = () => {\r\n          let additionalMarkers = new google.maps.Marker({\r\n            map: this.map,\r\n            id: this.state.randomID,\r\n            position: this.state.currentClickLocation,\r\n            lat: this.state.currentClickLocation.lat(),\r\n            lng: this.state.currentClickLocation.lng(),\r\n            animation: google.maps.Animation.DROP,\r\n            title: this.state.newRestaurantName,\r\n            rating: parseInt(this.state.newRestaurantRating),\r\n            icon: markerIcon\r\n          });\r\n          this.markers.push(additionalMarkers);\r\n\r\n          // Event listener for the new markers\r\n          google.maps.event.addListener(additionalMarkers, \"click\", () => {\r\n            /* Get the right value from the add new restaurant form \r\n            to display on infowindow */\r\n            let viewNewMarkers = position => {\r\n              position = additionalMarkers.position;\r\n              let filteredNewMarkerArr = [];\r\n\r\n              this.state.newMarkersArr.forEach(additionalMarker => {\r\n                if (additionalMarker.position === position) {\r\n                  filteredNewMarkerArr.push(additionalMarker);\r\n                }\r\n              });\r\n\r\n              return filteredNewMarkerArr;\r\n            };\r\n            let selectedNewMarker = viewNewMarkers();\r\n\r\n            /* Get the right value from the newly added review of the new restaurant \r\n            to display on infowindow */\r\n            let viewNewReviewsNewMarkers = position => {\r\n              position = additionalMarkers.position;\r\n              let filteredNewReviewsNewMarkerArr = [];\r\n\r\n              this.state.newReviews.forEach(review => {\r\n                if (review.position === position) {\r\n                  filteredNewReviewsNewMarkerArr.push(review);\r\n                }\r\n              });\r\n              return filteredNewReviewsNewMarkerArr;\r\n            };\r\n            let selectedNewReviewsNewMarker = viewNewReviewsNewMarkers();\r\n\r\n            // Content for the infowindow of the new markers\r\n            let newMarkerBox = `\r\n              <div class=\"reviewBox\">\r\n              <h4>${additionalMarkers.title}</h4>\r\n                <div class=\"reviewText\">${selectedNewMarker\r\n                .map(marker => {\r\n                  return (\r\n                    \"<p>Rating: \" +\r\n                    marker.reviews.rating +\r\n                    \"</p>\" +\r\n                    '<p class=\"text\">Review: ' +\r\n                    marker.reviews.text +\r\n                    \"</p>\"\r\n                  );\r\n                })\r\n                .join(\"\")}\r\n                  <div class=\"reviewNewText\">${selectedNewReviewsNewMarker\r\n                .map(review => {\r\n                  return (\r\n                    \"<p>Rating: \" +\r\n                    review.rating +\r\n                    \"</p>\" +\r\n                    '<p class=\"text\">Review: ' +\r\n                    review.feedback +\r\n                    \"</p>\"\r\n                  );\r\n                })\r\n                .join(\"\")}\r\n                </div>\r\n                <img class=\"streetview\" src=${getGoogleImage(\r\n                  additionalMarkers\r\n                )} alt=\"Streetview\"/>\r\n              </div>`;\r\n\r\n            // Show infowindow when a new marker is clicked\r\n            this.infowindow.setContent(newMarkerBox);\r\n            this.infowindow.open(this.map, additionalMarkers);\r\n          });\r\n        };\r\n        // End add new markers\r\n\r\n        // Add new temporary marker\r\n        let addTempMarker = location => {\r\n          let newTempMarker = new google.maps.Marker({\r\n            position: location,\r\n            map: this.map,\r\n            visible: false\r\n          });\r\n\r\n          this.newMarkers.push(newTempMarker);\r\n        };\r\n\r\n        // Create Markers from the Google places library\r\n        let viewMarkers = places => {\r\n          for (let place of places) {\r\n            let restaurantsMarkers = new google.maps.Marker({\r\n              map: this.map,\r\n              id: place.place_id,\r\n              lat: place.geometry.location.lat(),\r\n              lng: place.geometry.location.lng(),\r\n              position: place.geometry.location,\r\n              icon: markerIcon,\r\n              title: place.name,\r\n              animation: google.maps.Animation.DROP,\r\n              rating: place.rating\r\n            });\r\n            this.places.push(place);\r\n            this.markers.push(restaurantsMarkers);\r\n            this.setState({ places: this.places });\r\n            this.setState({ filteredPlaces: this.places });\r\n\r\n            restaurantsMarkers.addListener(\"click\", () => {\r\n              // Add a bounce effect when the restaurant marker is clicked\r\n              if (restaurantsMarkers.getAnimation() !== null) {\r\n                restaurantsMarkers.setAnimation(null);\r\n              } else {\r\n                restaurantsMarkers.setAnimation(google.maps.Animation.BOUNCE);\r\n              }\r\n              setTimeout(() => {\r\n                restaurantsMarkers.setAnimation(null);\r\n              }, 1500);\r\n            });\r\n\r\n            // Event listener for the existing restaurants\r\n            google.maps.event.addListener(restaurantsMarkers, \"click\", () => {\r\n              /* Get the right value from existing restaurants \r\n              to display on infowindow */\r\n              let filterReviews = restaurantID => {\r\n                restaurantID = restaurantsMarkers.id;\r\n                let filteredReviews = {};\r\n\r\n                for (let review in this.state.placeReviews) {\r\n                  // Check if the ID exist\r\n                  if (restaurantID.indexOf(review) > -1) {\r\n                    filteredReviews[review] = this.state.placeReviews[review];\r\n                    return filteredReviews;\r\n                  }\r\n                }\r\n              };\r\n\r\n              let selectedReviews = filterReviews();\r\n              let selectedReviewsById = selectedReviews[restaurantsMarkers.id];\r\n\r\n              /* Get the right value from the newly added review of existing restaurants \r\n              to display on infowindow */\r\n              let filterNewReviews = restaurantID => {\r\n                restaurantID = restaurantsMarkers.id;\r\n                let filteredNewReviewsArr = [];\r\n\r\n                this.state.newReviews.forEach(review => {\r\n                  if (review.id === restaurantID) {\r\n                    filteredNewReviewsArr.push(review);\r\n                  }\r\n                });\r\n                return filteredNewReviewsArr;\r\n              };\r\n\r\n              let selectedNewReviews = filterNewReviews();\r\n\r\n              // Content for the infowindow\r\n              let reviewBox = `\r\n                <div class=\"reviewBox\">\r\n                  <h4>${restaurantsMarkers.title}</h4>    \r\n                  <div class=\"reviewText\">${selectedReviewsById\r\n                  .map(review => {\r\n                    return (\r\n                      \"<h5>Name: \" +\r\n                      review.author_name +\r\n                      \"</h5>\" +\r\n                      \"<p>Rating: \" +\r\n                      review.rating +\r\n                      \"</p>\" +\r\n                      '<p class=\"text\">Review: ' +\r\n                      review.text +\r\n                      \"</p>\"\r\n                    );\r\n                  })\r\n                  .join(\"\")}\r\n                  <div class=\"reviewNewText\">${selectedNewReviews\r\n                  .map(review => {\r\n                    return (\r\n                      \"<p>Rating: \" +\r\n                      review.rating +\r\n                      \"</p>\" +\r\n                      '<p class=\"text\">Review: ' +\r\n                      review.feedback +\r\n                      \"</p>\"\r\n                    );\r\n                  })\r\n                  .join(\"\")}\r\n                  </div>  \r\n                  </div>\r\n                  <img class=\"streetview\" src=${getGoogleImage(\r\n                    restaurantsMarkers\r\n                  )} alt=\"Streetview\"/>\r\n                </div>`;\r\n\r\n              // Show infowindow when a marker is clicked\r\n              this.infowindow.setContent(reviewBox);\r\n              this.infowindow.open(this.map, restaurantsMarkers);\r\n            });\r\n          }\r\n        };\r\n        // End viewMarkers\r\n\r\n        // Create markers from local JSON\r\n        let localMarker = places => {\r\n          for (let place of places) {\r\n            let localMarkers = new google.maps.Marker({\r\n              map: this.map,\r\n              id: place.place_id,\r\n              lat: place.geometry.location.lat,\r\n              lng: place.geometry.location.lng,\r\n              position: place.geometry.location,\r\n              title: place.name,\r\n              animation: google.maps.Animation.DROP,\r\n              rating: place.rating,\r\n              icon: markerIcon\r\n            });\r\n            this.markers.push(localMarkers);\r\n\r\n            // Event listener for the local markers\r\n            google.maps.event.addListener(localMarkers, \"click\", () => {\r\n              // Get the right value to display on infowindow\r\n              let filterLocalReviews = restaurantID => {\r\n                restaurantID = localMarkers.id;\r\n                let filteredLocalReviews = {};\r\n\r\n                for (let review in this.state.localPlaceReviews) {\r\n                  // Check if the ID exist\r\n                  if (restaurantID.indexOf(review) > -1) {\r\n                    filteredLocalReviews[review] = this.state.localPlaceReviews[\r\n                      review\r\n                    ];\r\n                    return filteredLocalReviews;\r\n                  }\r\n                }\r\n              };\r\n              let selectedLocalReviews = filterLocalReviews();\r\n\r\n              let selectedLocalReviewsById =\r\n                selectedLocalReviews[localMarkers.id];\r\n\r\n              /* Get the right value from the newly added review\r\n              to display on infowindow */\r\n              let filterNewReviews = restaurantID => {\r\n                restaurantID = localMarkers.id;\r\n                let filteredNewReviewsArr = [];\r\n\r\n                this.state.newReviews.forEach(review => {\r\n                  if (review.id === restaurantID) {\r\n                    filteredNewReviewsArr.push(review);\r\n                  }\r\n                });\r\n                return filteredNewReviewsArr;\r\n              };\r\n\r\n              let selectedNewReviews = filterNewReviews();\r\n\r\n              let reviewLocalJsonBox = `\r\n                <div class=\"reviewBox\">\r\n                  <h4>${localMarkers.title}</h4>\r\n                  <div class=\"reviewText\">${selectedLocalReviewsById\r\n                  .map(review => {\r\n                    return (\r\n                      \"<p>Rating: \" +\r\n                      review.rating +\r\n                      \"</p>\" +\r\n                      '<p class=\"text\">Review: ' +\r\n                      review.text +\r\n                      \"</p>\"\r\n                    );\r\n                  })\r\n                  .join(\"\")}\r\n                    <div class=\"reviewNewText\">${selectedNewReviews\r\n                  .map(review => {\r\n                    return (\r\n                      \"<p>Rating: \" +\r\n                      review.rating +\r\n                      \"</p>\" +\r\n                      '<p class=\"text\">Review: ' +\r\n                      review.feedback +\r\n                      \"</p>\"\r\n                    );\r\n                  })\r\n                  .join(\"\")}\r\n                    </div>\r\n                  </div>\r\n                  <img class=\"streetview\" src=${getGoogleImage(\r\n                    localMarkers\r\n                  )} alt=\"Streetview\"/>\r\n                </div>`;\r\n\r\n              // Show infowindow when a marker is clicked\r\n              this.infowindow.setContent(reviewLocalJsonBox);\r\n              this.infowindow.open(this.map, localMarkers);\r\n            });\r\n          }\r\n        };\r\n        // End localMarker\r\n\r\n        localMarker(localJson);\r\n\r\n        // Create a marker for the user position\r\n        let userPosition = { lat: this.state.lat, lng: this.state.lon };\r\n        let currentPosition = new google.maps.Marker({\r\n          map: this.map,\r\n          position: userPosition,\r\n          animation: google.maps.Animation.DROP\r\n        });\r\n\r\n        // Star ratings\r\n        let starRatings = () => {\r\n          const starsTotal = 5;\r\n          let ratings = {};\r\n\r\n          this.state.places.forEach(place => {\r\n            let placeID = place.place_id;\r\n            ratings[placeID] = place.rating;\r\n          });\r\n\r\n          for (let rating in ratings) {\r\n            let starPercentage = (ratings[rating] / starsTotal) * 100;\r\n            let starPercentageRounded = `${Math.round(starPercentage / 10) *\r\n              10}%`;\r\n            let innerDivs = document.querySelectorAll(\r\n              `.${rating} .stars-inner`\r\n            );\r\n\r\n            innerDivs.forEach(innerDiv => {\r\n              innerDiv.style.width = starPercentageRounded;\r\n            });\r\n          }\r\n        };\r\n        starRatings();\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        alert(\"Error loading page...\");\r\n      });\r\n  }\r\n\r\n  // Filter marker and places\r\n  onFormSubmit = ratings => {\r\n    let ratingsNum = Number(ratings);\r\n\r\n    // Filter places based on the ratings\r\n    let updatedFilteredPlaces = this.state.places.filter(place => {\r\n      return place.rating >= ratingsNum;\r\n    });\r\n\r\n    this.setState({ filteredPlaces: updatedFilteredPlaces });\r\n\r\n    // Filter marker based on the ratings\r\n    this.state.filteredPlaces.forEach(filteredPlace => {\r\n      this.markers.forEach(marker => {\r\n        if (filteredPlace.place_id === marker.id) {\r\n          marker.rating = filteredPlace.rating;\r\n        }\r\n        if (marker.rating >= ratingsNum) {\r\n          marker.setVisible(true);\r\n        } else if (ratingsNum === 0) {\r\n          marker.setVisible(true);\r\n        } else {\r\n          marker.setVisible(false);\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  // Show the restaurant name when the restaurant name on the sidebar is clicked\r\n  listItemClick = place => {\r\n    // Get the marker id\r\n    let marker = this.markers.filter(marker => marker.id === place.place_id)[0];\r\n\r\n    this.infowindow.setContent(marker.title);\r\n    this.infowindow.open(this.map, marker);\r\n  };\r\n\r\n  // Get the current name value from the Add a new restaurant form\r\n  newRestaurantName = name => {\r\n    this.setState({ newRestaurantName: name }, () => { });\r\n  };\r\n\r\n  // Get the current address value from the Add a new restaurant form\r\n  newRestaurantAddress = name => {\r\n    this.setState({ newRestaurantAddress: name }, () => { });\r\n  };\r\n\r\n  // Get the current rating value from the Add a new restaurant form\r\n  newRestaurantRating = rating => {\r\n    this.setState({ newRestaurantRating: rating }, () => { });\r\n  };\r\n\r\n  // Get the current address value from the Add a new restaurant form\r\n  newRestaurantFeedback = name => {\r\n    this.setState({ newRestaurantFeedback: name }, () => { });\r\n  };\r\n\r\n  /* Merge the coordinate from the newMarkers array and\r\n  the value from the newRestaurantList array (from AddRestaurants.js)\r\n  Set the newMarkersArr state */\r\n  newSubmit = newRestaurantList => {\r\n    let newRestaurantObj = {\r\n      geometry: {},\r\n      reviews: {}\r\n    };\r\n\r\n    // Add the coordinate from the newMarkers to the newRestaurantObj\r\n    this.newMarkers.forEach(marker => {\r\n      newRestaurantObj[\"position\"] = marker.position;\r\n      newRestaurantObj[\"geometry\"][\"location\"] = marker.position;\r\n    });\r\n\r\n    // Add values from the newRestaurantList array to the newRestaurantObj\r\n    newRestaurantList.forEach(list => {\r\n      newRestaurantObj[\"place_id\"] = this.state.randomID;\r\n      newRestaurantObj[\"name\"] = list.name;\r\n      newRestaurantObj[\"vicinity\"] = list.address;\r\n      newRestaurantObj[\"rating\"] = parseInt(list.rating);\r\n      newRestaurantObj[\"reviews\"][\"rating\"] = parseInt(list.rating);\r\n      newRestaurantObj[\"reviews\"][\"text\"] = list.feedback;\r\n      newRestaurantObj[\"user_ratings_total\"] = 1;\r\n    });\r\n\r\n    this.places.push(newRestaurantObj);\r\n\r\n    let newMarkersArr = this.state.newMarkersArr.slice();\r\n    newMarkersArr.push(newRestaurantObj);\r\n\r\n    this.setState({ newMarkersArr }, () => { });\r\n  };\r\n\r\n  // Add new review\r\n  onReviewSubmit = addReview => {\r\n    let newReviewObj = {};\r\n    addReview.forEach(review => {\r\n      newReviewObj[\"id\"] = review.id;\r\n      newReviewObj[\"position\"] = review.position;\r\n      newReviewObj[\"rating\"] = review.rating;\r\n      newReviewObj[\"feedback\"] = review.feedback;\r\n    });\r\n\r\n    // Existing restaurants review\r\n    let newReviews = this.state.newReviews.slice();\r\n    newReviews.push(newReviewObj);\r\n\r\n    this.setState({ newReviews }, () => { });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <div id='map' />\r\n        <AddRestaurants\r\n          newSubmit={this.newSubmit}\r\n          newRestaurantName={this.newRestaurantName}\r\n          newRestaurantAddress={this.newRestaurantAddress}\r\n          newRestaurantRating={this.newRestaurantRating}\r\n          newRestaurantFeedback={this.newRestaurantFeedback}\r\n        />\r\n        <Sidebar\r\n          places={this.state.filteredPlaces}\r\n          onReviewSubmit={this.onReviewSubmit}\r\n          listItemClick={this.listItemClick}\r\n        >\r\n          <RatingsFilter onFormSubmit={this.onFormSubmit} />\r\n        </Sidebar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n"],"sourceRoot":""}